name: Auto Release

on:
  push:
    branches: [ main ]

# Add explicit permissions for creating releases
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Calculate version
        id: calculate_version
        run: |
          # Get the latest tag or start with 0.0.0 if no tags exist
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | grep "^v[0-9]*\.[0-9]*\.[0-9]*$" | head -n 1 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Strip 'v' prefix
          version=${latest_tag#v}
          
          # Split into major.minor.patch
          IFS='.' read -r major minor patch <<< "$version"
          
          # Increment minor version
          minor=$((minor + 1))
          patch=0
          
          # Create new version
          new_version="$major.$minor.$patch"
          echo "New version: $new_version"
          
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "tag=v$new_version" >> $GITHUB_OUTPUT
      
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.calculate_version.outputs.tag }}
          release_name: OllamaCraft ${{ steps.calculate_version.outputs.tag }}
          draft: false
          prerelease: false
          body: |
            # OllamaCraft Release ${{ steps.calculate_version.outputs.tag }}
            
            A Minecraft Paper plugin that allows players to interact with an AI assistant powered by Ollama.
            
            ## Installation
            1. Download the JAR file
            2. Place it in your server's `plugins` directory
            3. Start or restart your server
            4. The plugin will generate default configuration files
            
            ## Features
            - Talk to an AI assistant directly in Minecraft chat
            - Configure which AI model to use from Ollama
            - Maintains conversation history for context
            - AI can execute Minecraft commands through MCP integration
            - Configurable chat triggers and response formatting
      
      - name: Find JAR file
        id: find_jar
        run: |
          jar_path=$(find target -name "ollamacraft-*.jar" | head -n 1)
          echo "jar_path=$jar_path" >> $GITHUB_OUTPUT
      
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.find_jar.outputs.jar_path }}
          asset_name: OllamaCraft-${{ steps.calculate_version.outputs.version }}.jar
          asset_content_type: application/java-archive