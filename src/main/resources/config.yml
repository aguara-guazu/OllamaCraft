# OllamaCraft Configuration

# Main AI Settings
ai:
  # Primary AI provider (ollama, claude, openai)
  provider: "ollama"
  # Configurable agent name
  agent-name: "Steve"
  # System prompt with agent name placeholder
  system-prompt: "You are {agent_name}, a helpful assistant in a Minecraft world. You can answer questions about Minecraft and help players with their tasks."
  # Temperature setting (0.0 to 1.0) - higher values make responses more random
  temperature: 0.7
  # Maximum context length to preserve (number of most recent messages)
  max-context-length: 50

# Provider-specific configurations
ollama:
  # The model to use for AI responses
  model: "llama3.1"
  # The URL of the Ollama API
  base-url: "http://localhost:11434/api"
  # Request timeout in seconds for Ollama API calls
  timeout-seconds: 60
  # Maximum number of retry attempts for failed API requests
  max-retries: 3

claude:
  # Claude model to use
  model: "claude-3-5-sonnet-20241022"
  # Your Claude API key
  api-key: "your-claude-api-key"
  # Claude API base URL
  base-url: "https://api.anthropic.com/v1"
  # Request timeout in seconds
  timeout-seconds: 60
  # Maximum retry attempts
  max-retries: 3

openai:
  # OpenAI model to use
  model: "gpt-4o"
  # Your OpenAI API key
  api-key: "your-openai-api-key"
  # OpenAI API base URL
  base-url: "https://api.openai.com/v1"
  # Organization ID (optional)
  organization: "your-org-id"
  # Request timeout in seconds
  timeout-seconds: 60
  # Maximum retry attempts
  max-retries: 3

# Chat Settings
chat:
  # Whether to monitor all chat for AI interactions
  monitor-all-chat: false
  # Prefix that triggers AI response in chat (fallback mode)
  trigger-prefix: "Steve, "
  # How AI responses should be formatted (use {agent_name} placeholder)
  response-format: "[{agent_name}] &a%message%"
  
  # Intelligent Detection System
  detection:
    # Enable intelligent response detection (recommended for advanced users)
    intelligent-detection: false
    # AI provider to use for detection analysis (should be fast)
    detection-provider: "ollama"
    # Timeout for detection analysis in seconds
    detection-timeout-seconds: 3
    # Fallback to prefix detection if intelligent detection fails
    fallback-to-prefix: true
    # Minimum confidence threshold to trigger response (0.0-1.0)
    confidence-threshold: 0.6
    # Cache similar detection decisions for performance
    cache-decisions: true
    # How long to cache decisions in minutes
    cache-duration-minutes: 5

# Startup Integration Test
startup-test:
  # Enable automatic startup test to verify AI and MCP integration
  enabled: true
  # Delay before running startup test (in seconds) - allows server to fully start
  delay-seconds: 5
  # Whether to broadcast the startup test to all players
  broadcast-to-players: true

# MCP Integration (Advanced Feature)
# MCP allows the AI to execute Minecraft commands automatically
# IMPORTANT: Requires a separate MCP server to be running
# Set enabled to false for basic AI chat functionality only
mcp:
  # Whether to enable the Minecraft Command Protocol integration
  # Set to false if you don't have an MCP server running
  enabled: false
  # MCP server configuration
  server:
    # The URL of the Minecraft MCP server
    url: "http://localhost:25575"
    # API key for authentication with MCP (keep this secure!)
    api-key: "your-secure-api-key-from-plugin-config"
  # MCP tools configuration
  tools:
    # Enable MCP tools for the AI model (allows AI to execute Minecraft commands)
    enabled: true
  # MCP bridge configuration
  bridge:
    # Enable debug logging for the bridge
    debug: false
    # HTTP endpoint path for MCP server
    endpoint: "/mcp"
    # Request timeout in milliseconds
    timeout-ms: 30000
    # Number of retry attempts for failed requests
    retries: 3
    # Delay between retries in milliseconds
    retry-delay-ms: 1000